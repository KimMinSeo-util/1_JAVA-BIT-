문제1
문자열내의 특정 문자를 지정한 문자로 수정하는 
myReplace 메서드를 완성하시오. 
myReplace 메서드의 첫번째 매개변수는 수정대상이 되는 문자열이며 
두번째 매개변수는 문자열내에 존재하는 문자이며 
세번째 매개변수는 변경하고자 하는 문자입니다.
myReplace 메서드는 변경한 문자열을 리턴하며 
만약 문자열내에 변경대상이 되는 문자가 없을 경우 
변경 없이 그대로 리턴해야 합니다.

<<수행결과>>
-------------Sample 1 --------------
he**o wor*d
-------------Sample 2 --------------
hello-world
-------------Sample 3 --------------
hello world

 	
<<참고 및 주의사항>>
- main 메서드는 수정없이 그대로 사용합니다.
- 주어진 메소드의 signature는 변경하지 않습니다.
- String 클래스의 replace, replaceAll 메서드와 
StringTokenizer 클래스는 사용하지 말아야 합니다.


public class Converter {
	public static void main(String[] args) {
		System.out.println("문자열에 특정문자 변경하는 테스");
		System.out.println("-------------Sample 1 --------------");
		String str1=myReplace("hello world",'l','*');
		System.out.println(str1);
		
		System.out.println("-------------Sample 2 --------------");
		String str2=myReplace("hello world",' ','-');
		System.out.println(str2);
		
		System.out.println("-------------Sample 3 --------------");
		String str3=myReplace("hello world",'a','*');
		System.out.println(str3);
		

	}
	
	public static String myReplace(String str, char oldChar, char newChar){
		// 이 부분을 구현하시오.

		
			 
	}
}


문제2
임의의 문자열(String str)과 구분자(char separator)를 입력 받아 
str에 포함된 구분자를 기준으로 str을 문자열 배열로 만들어 
반환하는 기능의 split() 메소드를 작성하세요.

<<수행결과>>
배열 크기 : 4
서울시 강남구 역삼동 삼성SDS멀티캠퍼스

<<참고 및 주의사항>>
- String 클래스의 split() 메소드를 사용하지 말고 직접 구현해야 합니다.
- main 메소드의 내용은 채점하지 않으므로 테스트 목적으로 수정할 수 있습니다.
- 주어진 메소드의 signature는 변경하지 않습니다.


public class Spliting{
	public static void main(String[] args) {
		Spliting p = new Spliting();
		String addr = "서울시,강남구,역삼동,삼성SDS멀티캠퍼스";
		String[] addrArr = p.split(addr, ',');
		System.out.println("배열 크기 : " + addrArr.length);
		for(int i=0; i<addrArr.length; i++){
			System.out.print(addrArr[i] + " ");
		}		
	}

	public String[] split(String str, char separator){
		
		
	}
}

